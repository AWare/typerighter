AWSTemplateFormatVersion: 2010-09-09
Description: Typerighter language and style checking tool

Parameters:
  Vpc:
    Description: VpcId of your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>
    Default: /account/vpc/default/id
  PublicSubnets:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Default: /account/vpc/default/public.subnets
  PrivateSubnets:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Default: /account/vpc/default/private.subnets
  Stack:
    Description: Should never change
    Type: String
    Default: flexible
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
    - CODE
    - PROD
  AMI:
    Description: AMI ID. Set by RiffRaff on each deploy
    Type: String
  CertificateArn:
    Description: The ARN of the HTTPS certificate
    Type: String
  DigDevBubble:
    Description: The CIDR block of the dig dev bubble
    Type: String
    Default: 10.249.0.0/18
  KinesisLoggingStream:
    Description: Name of the ELK logging stream in this account
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/logging.stream
  CloudFrontSSLCertificateArn:
    Description: The ARN of the certificate for the CloudFront distribution
    Type: String
  AlertTopic:
    Description: The SNS topic for pager duty alarms to be sent from this Stack - Not used for CODE
    Type: String
    
Mappings:
  StageVariables:
    CODE:
      MaxInstances: 2
      MinInstances: 1
      InstanceType: t4g.small
      CloudfrontAliases:
      - api.typerighter.code.dev-gutools.co.uk
    PROD:
      MaxInstances: 6
      MinInstances: 3
      InstanceType: t4g.small
      CloudfrontAliases:
      - api.typerighter.gutools.co.uk
  StageLookup:
    Lowercase:
      PROD: prod
      CODE: code

Conditions:
  CreateProdAlarms: !Equals [ !Ref Stage, PROD ]

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !FindInMap [ StageVariables, !Ref Stage, MinInstances ]
      MaxSize: !FindInMap [ StageVariables, !Ref Stage, MaxInstances ]
      TargetGroupARNs:
      - !Ref TargetGroup
      - !Ref PublicTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: true
      - Key: App
        Value: typerighter-checker
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      InstanceType: !FindInMap [ StageVariables, !Ref Stage, InstanceType ]
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      - !Ref WazuhSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 40
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev
          mkdir /etc/gu

          cat > /etc/gu/tags <<'EOF'
          Stage=${Stage}
          Stack=${Stack}
          App=typerighter-checker
          EOF

          cat > /etc/gu/typerighter-checker.conf << 'EOF'
          include "application"
          typerighter.ngramPath="/opt/ngram-data"
          EOF

          aws --quiet --region ${AWS::Region} s3 cp s3://composer-dist/${Stack}/${Stage}/typerighter-checker/typerighter-checker.deb /tmp/package.deb
          dpkg -i /tmp/package.deb

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Fn::ImportValue: guardian-ec2-for-ssm-GuardianEC2ForSSMPolicy
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  DescribeEC2Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DescribeEC2Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2:DescribeTags
          - ec2:DescribeInstances
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:DescribeAutoScalingInstances
      Roles:
      - !Ref AppRole

  GetDistributablesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetDistributablesPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - arn:aws:s3:::composer-dist/*
      Roles:
      - !Ref AppRole

  GetPandaAuthPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetPandaAuthPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - arn:aws:s3:::pan-domain-auth-settings/*public
      Roles:
      - !Ref AppRole

  SimpleConfigPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SimpleConfigPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - autoscaling:DescribeAutoScalingInstances
          - autoscaling:DescribeAutoScalingGroups
          - ec2:DescribeTags
          Resource: "*"
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/${Stack}/typerighter-checker
      Roles:
      - !Ref AppRole

  LoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoggingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:PutRecord
            Resource: !Ref KinesisLoggingStream
      Roles:
        - !Ref AppRole

  GetRulesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetRulesPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource: !Sub
            - arn:aws:s3:::typerighter-${Stage}/rules/*
            - { Stage: { Fn::FindInMap: [ StageLookup, Lowercase, Ref: Stage ] } }
      Roles:
      - !Ref AppRole

  CloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
      Roles:
      - !Ref AppRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PrivateSubnets
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Scheme: internal
      Tags:
      - Key: Stack
        Value: !Ref Stack
      - Key: App
        Value: typerighter-checker
      - Key: Stage
        Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
      - CertificateArn: !Ref CertificateArn
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
    DependsOn:
    - ElasticLoadBalancer

  PublicElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Tags:
      - Key: Stack
        Value: !Ref Stack
      - Key: App
        Value: typerighter-checker
      - Key: Stage
        Value: !Ref Stage

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: PublicTargetGroup
      LoadBalancerArn:
        Ref: PublicElasticLoadBalancer
      Certificates:
      - CertificateArn: !Ref CertificateArn
      Port: 443
      Protocol: HTTPS

  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
    DependsOn:
    - PublicElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9000
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref DigDevBubble
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  WazuhSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic from wazuh agent to manager
      VpcId: !Ref Vpc
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 1514
        ToPort: 1515
        CidrIp: 0.0.0.0/0

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join [ "-", ['typerighter', Fn::FindInMap: [ StageLookup, Lowercase, Ref: Stage ] ] ]
      AccessControl: Private
      Tags:
      - Key: Stack
        Value: !Ref Stack
      - Key: App
        Value: typerighter-checker
      - Key: Stage
        Value: !Ref Stage

  CloudfrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 90
          Status: Enabled
      Tags:
      - Key: Stack
        Value: !Ref Stack
      - Key: App
        Value: typerighter-checker
      - Key: Stage
        Value: !Ref Stage

  Cloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !FindInMap [ StageVariables, !Ref 'Stage', CloudfrontAliases]
        Origins:
        - CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
          DomainName: !GetAtt 'PublicElasticLoadBalancer.DNSName'
          Id: typerighter
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: true
          ForwardedValues:
            Headers:
            - '*'
            QueryString: true
            Cookies:
              Forward: all
          TargetOriginId: typerighter
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        Enabled: 'true'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CloudFrontSSLCertificateArn'
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt CloudfrontBucket.DomainName
          IncludeCookies: 'false'
          Prefix: ''

  RuleProvisionerAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdAlarms
    Properties:
      MetricName: RulesNotFound
      Namespace: Typerighter
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      Period: 60
      Statistic: Sum
      Threshold: 0
      ActionsEnabled: true
      AlarmActions:
        - !Ref "AlertTopic"
      AlarmName: !Sub "Typerighter - ${Stage} - rule provisioner issue"
      AlarmDescription: "There was a problem with the rule provisioning"
      Dimensions:
        - Name: Stage
          Value: !Ref Stage
      OKActions:
        - !Ref "AlertTopic"
      TreatMissingData: notBreaching
